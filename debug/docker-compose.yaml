version: '2.3'

networks:
  default:
    name: zam-step-network
    ipam:
      driver: default
      config:
        - subnet: 173.36.0.0/16

services:
  auth_db:
    image: postgres:15
    container_name: auth-service-db
    restart: always
    environment:
      POSTGRES_PASSWORD: "1234"
      POSTGRES_PORT: "12210"
      POSTGRES_USER: "auth"
      POSTGRES_DB: "postgres"
    ports:
      - "12210:5432"
    volumes:
      - ~/volumes/auth-service/pg-data:/var/lib/postgresql/data
      - ./auth-init:/docker-entrypoint-initdb.d
    command:
      - "docker-entrypoint.sh"
      - "-c"
      - "max-connections=800"

  user_db:
    image: postgres:15
    container_name: user-service-db
    restart: always
    mem_limit: 700M
    environment:
      POSTGRES_PASSWORD: "1234"
      POSTGRES_PORT: "12211"
      POSTGRES_USER: "oraz"
      POSTGRES_DB: "postgres"
    ports:
      - "12211:5432"
    volumes:
      - ~/volumes/user-service/pg-data:/var/lib/postgresql/data
      - ./user-init:/docker-entrypoint-initdb.d
    command:
      - "docker-entrypoint.sh"
      - "-c"
      - "max-connections=800"

  bigchaindb:
    image: bigchaindb/bigchaindb:all-in-one
    container_name: bigchaindb
    ports:
      - "9984:9984"
      - "9985:9985"
      - "27017:27017"
      - "26657:26657"
    volumes:
      - $HOME/bigchaindb_docker/mongodb/data/db:/data/db
      - $HOME/bigchaindb_docker/mongodb/data/configdb:/data/configdb
      - $HOME/bigchaindb_docker/tendermint:/tendermint

  crypto_db:
    image: postgres:15
    container_name: crypto-service-db
    restart: always
    mem_limit: 700M
    environment:
      POSTGRES_PASSWORD: "1234"
      POSTGRES_PORT: "12212"
      POSTGRES_USER: "crypto"
      POSTGRES_DB: "postgres"
    ports:
      - "12212:5432"
    #    volumes:
    #      - ~/volumes/cryptocurrency-service/pg-data:/var/lib/postgresql/data
    #      - ./user-init:/docker-entrypoint-initdb.d
    command:
      - "docker-entrypoint.sh"
      - "-c"
      - "max-connections=800"

  zoo:
    container_name: zam-step-zoo
    image: confluentinc/cp-zookeeper:5.5.0
    user: "0:0"
    mem_limit: 200M
    restart: always
    ports:
      - "12214:2181"
    volumes:
      - ~/volumes/sandbox/zookeeper/data:/var/lib/zookeeper/data
      - ~/volumes/sandbox/zookeeper/log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 11
      ZOOKEEPER_SYNC_LIMIT: 5

  zoo-navigator:
    container_name: zam-step-navigator
    image: elkozmon/zoonavigator:1.1.2
    restart: always
    mem_limit: 500M
    ports:
      - "12215:9001"                              #  http://localhost:12210
    environment:
      HTTP_PORT: "9001"
      AUTO_CONNECT_CONNECTION_ID: "MAIN"
      CONNECTION_MAIN_NAME: "main"
      CONNECTION_MAIN_CONN: "zoo:2181"

  kf:
    container_name: zam-step-kf
    image: bitnami/kafka:3.2.1
    mem_limit: 1G
    restart: always
    ports:
      - "12216:9093"
      - "12217:9094"
      - "12218:7071"
    depends_on:
      - zoo
    volumes:
      - ~/volumes/zam-step/kafka:/bitnami/kafka
    user: "0:0"
    environment:
      KAFKA_BROKER_ID: "1"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "IN_DOCKER:PLAINTEXT,FROM_LOCALHOST:PLAINTEXT,FROM_OUT:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "IN_DOCKER://kf:9092,FROM_LOCALHOST://localhost:12216,FROM_OUT://192.168.11.23:10020"
      KAFKA_CFG_LISTENERS: "IN_DOCKER://0.0.0.0:9092,FROM_LOCALHOST://0.0.0.0:9093,FROM_OUT://0.0.0.0:9094"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "IN_DOCKER"
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zoo:2181"

      KAFKA_CFG_NUM_PARTITIONS: "4"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: "1"
      KAFKA_CFG_LOG_RETENTION_HOURS: "-1"
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
      KAFKA_CFG_UNCLEAN_LEADER_ELECTION: "true"
      KAFKA_CFG_COMPRESSION_TYPE: 'gzip'
      KAFKA_CFG_LOG_ROLL_HOURS: '1'

  kafdrop:
    container_name: zam-step-kafdrop
    image: obsidiandynamics/kafdrop:3.30.0
    mem_limit: 500M
    restart: always
    ports:
      - "12219:9000"                              #  http://localhost:12214
    environment:
      KAFKA_BROKERCONNECT: "kf:9092"
      SERVER_PORT: "9000"
      JVM_OPTS: "-Xms500M -Xmx500M"
      SERVER_SERVLET_CONTEXTPATH: "/"

  eureka-server:
    build:
      context: ../eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"

  auth-server:
    build:
      context: ../auth-server
      dockerfile: Dockerfile
    container_name: auth-server
    ports:
      - "8081:8081"
    depends_on:
      - auth_db
      - eureka-server
      - kf
    environment:
      DATABASE_HOST: auth_db
      DATABASE_PORT: 5432
      DATABASE_USER: auth
      DATABASE_PASSWORD: 1234
      EUREKA_URI: http://host.docker.internal:8761/eureka
      KAFKA_HOST: kf
      KAFKA_PORT: 9092

  user-service:
    build:
      context: ../user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8082:8082"
    depends_on:
      - user_db
      - eureka-server
      - kf
    environment:
      DATABASE_HOST: user_db
      DATABASE_PORT: 5432
      DATABASE_USER: oraz
      DATABASE_PASSWORD: 1234
      EUREKA_URI: http://host.docker.internal:8761/eureka
      KAFKA_HOST: kf
      KAFKA_PORT: 9092
      AUTH_SERVER_URI: http://host.docker.internal:8080/api/auth

  cryptocurrency-service:
    build:
      context: ../cryptocurrency-service
      dockerfile: Dockerfile
    container_name: cryptocurrency-service
    ports:
      - "8083:8083"
    depends_on:
      - crypto_db
      - eureka-server
    environment:
      DATABASE_HOST: crypto_db
      DATABASE_PORT: 5432
      DATABASE_USER: crypto
      DATABASE_PASSWORD: 1234
      EUREKA_URI: http://host.docker.internal:8761/eureka
      AUTH_SERVER_URI: http://host.docker.internal:8080/api/auth

  health-service:
    build:
      context: ../health-service
      dockerfile: Dockerfile
    container_name: health-service
    ports:
      - "8084:8084"
    depends_on:
      - bigchaindb
      - eureka-server
    environment:
      EUREKA_URI: http://host.docker.internal:8761/eureka
      AUTH_SERVER_URI: http://host.docker.internal:8080/api/auth

  api-gateway:
    build:
      context: ../api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - auth-server
      - user-service
      - health-service
      - cryptocurrency-service
      - eureka-server
    environment:
      EUREKA_URI: http://host.docker.internal:8761/eureka
      AUTH_URI: http://host.docker.internal:8081/api/auth
      USER_SERVICE_URI: http://host.docker.internal:8082/api/user
      HEALTH_SERVICE_URI: http://host.docker.internal:8084/api/health-analysis
      CRYPTOCURRENCY_TRANSACTION_SERVICE_URI: http://host.docker.internal:8083/api/transactions
      CRYPTOCURRENCY_WALLET_SERVICE_URI: http://host.docker.internal:8083/api/wallets